# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import os
import joblib

# === Load and preprocess data ===
data = pd.read_csv("data/crude_oil_macro_data.csv")
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# === Target variable ===
target = data['Close_CL=F'].fillna(method='ffill')
scaler = MinMaxScaler()
target_scaled = scaler.fit_transform(target.values.reshape(-1, 1))

# === Create sequences ===
def create_sequences(data, seq_length):
    X_seq, y_seq = [], []
    for i in range(seq_length, len(data)):
        X_seq.append(data[i-seq_length:i, 0])
        y_seq.append(data[i, 0])
    return np.array(X_seq), np.array(y_seq)

seq_len = 60
X_seq, y_seq = create_sequences(target_scaled, seq_len)
X_seq = np.reshape(X_seq, (X_seq.shape[0], X_seq.shape[1], 1))

# === Train/test split ===
split = int(0.8 * len(X_seq))
X_train, X_test = X_seq[:split], X_seq[split:]
y_train, y_test = y_seq[:split], y_seq[split:]

# === Build model ===
model = Sequential()
model.add(LSTM(64, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(64))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# === Evaluate ===
predicted = model.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, predicted))
print(f"\nâœ… LSTM RMSE: {rmse:.4f}")

# === Inverse transform predictions ===
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))
predicted_actual = scaler.inverse_transform(predicted)

# === Save model and scaler ===
os.makedirs("models", exist_ok=True)
model.save("models/lstm_model.h5")
joblib.dump(scaler, "models/lstm_scaler.save")

# === Plot ===
plt.figure(figsize=(12,5))
plt.plot(y_test_actual, label='Actual')
plt.plot(predicted_actual, label='Predicted')
plt.title("LSTM Forecast vs Actual")
plt.legend()
plt.savefig("models/lstm_forecast_plot.png")
plt.show()